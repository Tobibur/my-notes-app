{"version":3,"sources":["components/ListNotes.js","components/CreateNote.js","utils/NotesAPI.js","App.js","serviceWorker.js","index.js"],"names":["ListNotes","state","query","updateQuery","_this","setState","trim","clearQuery","showingNotes","_this2","this","_this$props","props","noteList","onDeleteNote","match","RegExp","escapeRegExp","filter","note","test","title","sort","sortBy","react_default","a","createElement","className","type","placeholder","value","onChange","event","target","react_router_dom","to","length","onClick","map","key","id","content","Component","CreateNote","handleSubmit","e","preventDefault","values","serializeForm","hash","console","log","onCreateNote","align","onSubmit","data-validate","name","api","process","REACT_APP_NOTES_API_URL","headers","Accept","Access-Control-Allow-Origin","Access-Control-Allow-Credentials","remove","fetch","concat","method","then","res","App","notes","removeNote","n","NotesAPI","json","data","body","_this3","Object","objectSpread","Content-Type","JSON","stringify","_this4","react_router","exact","path","render","components_ListNotes","_ref","history","components_CreateNote","createNote","push","Boolean","window","location","hostname","ReactDOM","basename","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.869d09ce.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport escapeRegExp from 'escape-string-regexp'\r\nimport sortBy from 'sort-by'\r\n\r\nclass ListNotes extends Component {\r\n\r\n    propTypes = {\r\n        noteList: PropTypes.array.isRequired,\r\n        onDeleteNote: PropTypes.func.isRequired\r\n    }\r\n\r\n    state = {\r\n        query: ''\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        this.setState({ query: query.trim() })\r\n    }\r\n\r\n    clearQuery = () => {\r\n        this.setState({query: ''})\r\n    }\r\n\r\n    render() {\r\n\r\n        const { noteList, onDeleteNote } = this.props\r\n        const { query } = this.state\r\n\r\n        let showingNotes\r\n        if (query) {\r\n            const match = new RegExp(escapeRegExp(query), 'i')\r\n            showingNotes = noteList.filter((note) => match.test(note.title))\r\n        } else {\r\n            showingNotes = noteList\r\n        }\r\n\r\n        showingNotes.sort(sortBy('name'))\r\n\r\n        return (\r\n            <div className='list-notes'>\r\n                <div className='list-notes-top'>\r\n                    <input className='search-notes'\r\n                        type='text'\r\n                        placeholder='Search Notes'\r\n                        value={query}\r\n                        onChange={(event) => this.updateQuery(event.target.value)} />\r\n\r\n                    <Link to=\"/create\"\r\n                        className='add-note'>\r\n                        Add Note\r\n                    </Link>\r\n                </div>\r\n\r\n                {showingNotes.length !== noteList.length && (\r\n                    <div className='showing-notes'>\r\n                    <span>Now showing {showingNotes.length} of {noteList.length}</span>\r\n                    <button onClick={this.clearQuery}>Show all</button>\r\n                </div>\r\n                )}\r\n\r\n                <ol className='note-list'>\r\n                    {showingNotes.map((note) => (\r\n                        <li key={note.id} className='note-list-item'>\r\n                            <div className='note-details'>\r\n                                <h3>{note.title}</h3>\r\n                                <p>{note.content}</p>\r\n                            </div>\r\n                            <button onClick={() => onDeleteNote(note)} className='note-remove'>\r\n                                Remove\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n\r\n                </ol>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListNotes","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport serializeForm from 'form-serialize'\r\n\r\nclass CreateNote extends Component {\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const values = serializeForm(e.target, { hash: true })\r\n        console.log(values)\r\n        if (this.props.onCreateNote)\r\n            this.props.onCreateNote(values)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to=\"/\" className='close-create-note'>Close</Link>\r\n                <div align='center'>\r\n                    <div className=\"wrap-contact100\">\r\n\r\n                        <form onSubmit={this.handleSubmit} className=\"contact100-form validate-form\">\r\n                            <span className=\"contact100-form-title\">\r\n                                Create New Note\r\n\t\t\t\t</span>\r\n\r\n                            <div className=\"wrap-input100 validate-input\" data-validate=\"Please enter your name\">\r\n                                <input className=\"input100\" type=\"text\" name=\"title\" placeholder=\"Note Title\" />\r\n                                <span className=\"focus-input100\"></span>\r\n                            </div>\r\n\r\n                            <div className=\"wrap-input100 validate-input\" data-validate=\"Please enter your message\">\r\n                                <textarea className=\"input100\" name=\"content\" placeholder=\"Write something..\"></textarea>\r\n                                <span className=\"focus-input100\"></span>\r\n                            </div>\r\n\r\n                            <div className=\"container-contact100-form-btn\">\r\n                                <button className=\"contact100-form-btn\">\r\n                                    Add Note\r\n\t\t\t\t\t</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateNote","const api = process.env.REACT_APP_NOTES_API_URL || 'https://tobis-notes.herokuapp.com'\r\n\r\nconst headers = {\r\n    'Accept': 'application/json',\r\n    'Access-Control-Allow-Origin': 'http://localhost:8080',\r\n    'Access-Control-Allow-Credentials': 'true'\r\n}\r\n\r\nexport const getAll = () =>\r\n    fetch(`${api}/api/notes/`, { headers })\r\n        .then(res => res.json())\r\n\r\nexport const remove = (note) =>\r\n    fetch(`${api}/api/notes/${note.id}`, { method: 'DELETE', headers })\r\n        .then(res => res)\r\n\r\nexport const create = (body) =>\r\n    fetch(`${api}/api/notes/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(body)\r\n    }).then(res => res.json())","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\nimport './App.css';\nimport ListNotes from './components/ListNotes'\nimport CreateNote from './components/CreateNote'\nimport * as NotesAPI from './utils/NotesAPI'\n\nclass App extends Component {\n\n  state = {\n    notes: []\n  }\n\n  componentDidMount() {\n    NotesAPI.getAll().then((data) => {\n      console.log(data);\n      this.setState({ notes: data })\n    })\n  }\n\n  removeNote = (note) => {\n    this.setState((state) => ({\n      notes: state.notes.filter((n) => n.id !== note.id)\n    }))\n\n    NotesAPI.remove(note)\n  }\n\n  createNote(note){\n    NotesAPI.create(note).then(note =>{\n      this.setState(state => ({\n        notes: state.notes.concat([note])\n      }))\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Route exact path=\"/\" render={() =>(\n          <ListNotes noteList={this.state.notes}\n          onDeleteNote={this.removeNote} />\n        )}/>\n        \n        <Route path=\"/create\" render={({history}) =>(\n          <CreateNote onCreateNote={(note) => {\n            this.createNote(note)\n            history.push('/')\n          }}/>\n        )}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter basename=\"/my-notes-app\"><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}